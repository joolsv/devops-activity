version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

  docker-executor:
    docker:
      - image: cimg/base:stable

  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.5.7

  ansible-executor:
    docker:
      - image: geerlingguy/docker-ubuntu2004-ansible:latest

jobs:
  build-and-test:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Run tests
          command: |
            source venv/bin/activate
            pytest

  build-docker-image:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t $DOCKERHUB_USERNAME/flask-app:latest .
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Docker Image
          command: docker push $DOCKERHUB_USERNAME/flask-app:latest

  deploy-terraform:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Initialize Terraform
          command: |
            terraform init
      - run:
          name: Terraform Plan
          command: |
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            terraform apply -auto-approve

  deploy-ansible:
    executor: ansible-executor
    steps:
      - checkout
      - run:
          name: Install AWS CLI, Curl & SSM Plugin
          command: |
            apt update -y
            apt install -y awscli curl
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            dpkg -i session-manager-plugin.deb
            session-manager-plugin --version
      - run:
          name: Run Ansible Playbook via AWS SSM
          command: |
            COMMAND_ID=$(aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets Key=instanceIds,Values=i-06dd3c36ac4759973 \
              --parameters "commands=['cd /home/ec2-user && ansible-playbook -i inventory.ini deploy.yml -vvv || echo PLAYBOOK_FAILED']" \
              --region us-east-1 \
              --query "Command.CommandId" --output text)

            echo "Waiting for Ansible Playbook Execution..."
          
            while true; do
              STATUS=$(aws ssm list-command-invocations \
                --command-id "$COMMAND_ID" \
                --details \
                --query "CommandInvocations[0].Status" \
                --output text --region us-east-1)

              echo "Current status: $STATUS"
            
              if [[ "$STATUS" == "Success" ]]; then
                echo "Ansible Playbook Executed Successfully!"
                break
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "TimedOut" ]]; then
                echo "Ansible Playbook Execution Failed."
                exit 1
              fi
              sleep 5
            done

workflows:
  version: 2
  deploy-app:
    jobs:
      - build-and-test
      - build-docker-image:
          requires:
            - build-and-test
      - deploy-terraform:
          requires:
            - build-docker-image
      - deploy-ansible:
          requires:
            - deploy-terraform
